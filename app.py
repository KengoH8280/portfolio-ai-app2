# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xFaaKUsuubJGt1lZ-wW4bxXti8j4M5sW
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas.tseries.offsets import MonthEnd

st.set_page_config(page_title="AIポートフォリオ", layout="wide")
st.title("AIポートフォリオ予測（次月）")

# ========== 0) 安全フォールバック ==========
try:
    from pypfopt.risk_models import CovarianceShrinkage
    from pypfopt.efficient_frontier import EfficientFrontier
    from pypfopt.objective_functions import L2_reg
    HAS_PYPOPT = True
except Exception:
    HAS_PYPOPT = False

# ========== 1) データ取得（キャッシュ） ==========
@st.cache_data(ttl=60*60)
def load_prices(tickers, start="2010-01-01"):
    import yfinance as yf
    frames = []
    for t in tickers:
        df = yf.download(t, start=start, auto_adjust=True, progress=False, group_by=False)
        df = df[["Close"]].rename(columns={"Close":t})
        frames.append(df)
    px = pd.concat(frames, axis=1).dropna(how="all")
    m_prices = px.resample("M").last()
    return m_prices

# ユニバース（初期値は控えめに）
TICKERS = ["SPY","EFA","GLD","IEF","LQD"]
start = st.sidebar.text_input("開始日(YYYY-MM-DD)", "2010-01-01")
tickers_in = st.sidebar.multiselect("銘柄（上限はまず5〜10）", TICKERS, default=TICKERS)
rebalance = st.sidebar.selectbox("リバランス", ["quarterly","monthly"], index=0)
top_n = st.sidebar.slider("Top-N", 1, min(5, len(tickers_in)), 3)
max_w = st.sidebar.slider("1銘柄上限", 0.1, 1.0, 0.6, 0.1)
method = st.sidebar.selectbox("方式", ["hybrid","topn","mvo"], index=0)

run = st.button("最新データで予測＆レポートを実行")
if not run:
    st.info("左の設定を調整して『最新データで予測＆レポートを実行』を押してください。")
    st.stop()

m_prices = load_prices(tickers_in, start)
if m_prices.shape[1] == 0:
    st.error("価格データが取得できませんでした。銘柄や開始日を見直してください。")
    st.stop()

# ========== 2) 簡易特徴量 → 1ヶ月先分類（RF） ==========
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier

rets_m = m_prices.pct_change()
X = pd.DataFrame(index=rets_m.index)
X["mom_1"]  = rets_m[tickers_in].mean(axis=1)
X["mom_3"]  = rets_m[tickers_in].rolling(3).mean().mean(axis=1)
X["vol_6"]  = rets_m[tickers_in].rolling(6).std().mean(axis=1)
X = X.dropna()

y = (rets_m.shift(-1)[tickers_in].mean(axis=1) > 0).reindex(X.index).astype(int)
imp, sc = SimpleImputer(strategy="median"), StandardScaler()
Xtr = sc.fit_transform(imp.fit_transform(X))
clf = RandomForestClassifier(n_estimators=500, min_samples_leaf=3, random_state=42, n_jobs=-1)
clf.fit(Xtr, y)

# 直近月末の特徴で “次月” の上昇確率を銘柄別に出す
feat_last = pd.DataFrame({
    "mom_1":  rets_m[tickers_in].iloc[-1].mean(),
    "mom_3":  rets_m[tickers_in].iloc[-3:].mean().mean(),
    "vol_6":  rets_m[tickers_in].iloc[-6:].std().mean(),
}, index=[X.index[-1]])
proba_up = pd.Series(
    clf.predict_proba(sc.transform(imp.transform(feat_last)))[0,1],
    index=["avg"]
)

# 銘柄別スコア（単純に各銘柄のモメンタムで重み付け：初心者向け安定策）
score = rets_m[tickers_in].iloc[-3:].mean().clip(lower=0)  # 直近3ヶ月モメンタム（負は0）
if score.sum() == 0:
    score[:] = 1.0
w_topn = (score / score.sum()).sort_values(ascending=False)
if top_n < len(w_topn):
    w_topn.iloc[top_n:] = 0
w_topn = w_topn / w_topn.sum()

# MVO/Hybrid は PyPortfolioOpt がなければ TopN にフォールバック
if method in ("mvo","hybrid") and not HAS_PYPOPT:
    st.warning("PyPortfolioOpt未インストールのため、Top-N方式にフォールバックしました。")
    method = "topn"

weights = w_topn.copy()
if method in ("mvo","hybrid") and HAS_PYPOPT:
    # 共分散は直近36ヶ月
    win = min(36, len(m_prices))
    S = CovarianceShrinkage(m_prices.iloc[-win:]).ledoit_wolf()
    mu_m = rets_m.rolling(3).mean().iloc[-1].clip(-0.5,0.5)  # 月次期待
    mu_a = (1+mu_m)**12 - 1
    try:
        ef = EfficientFrontier(mu_a.to_dict(), S, weight_bounds=(0, max_w))
        if method == "hybrid":
            ef.add_objective(L2_reg, gamma=0.001)
        w_dict = ef.max_sharpe()
        w = pd.Series([w_dict.get(t,0) for t in tickers_in], index=tickers_in)
        if w.sum() > 0:
            weights = w / w.sum()
        else:
            weights = w_topn
    except Exception:
        weights = w_topn

# ========== 3) 次月ポートフォリオ表示 ==========
apply_month = (m_prices.index[-1] + MonthEnd(1))
st.subheader(f"次月ポートフォリオ（{apply_month.strftime('%Y-%m')} 適用想定）")
tbl = pd.DataFrame({"Weight":weights}).sort_values("Weight", ascending=False)
st.dataframe(tbl.style.format({"Weight":"{:.2%}"}), use_container_width=True)

fig, ax = plt.subplots(figsize=(7,4))
tbl["Weight"].sort_values().plot(kind="barh", ax=ax)
ax.set_xlabel("Weight"); ax.grid(True, axis="x")
st.pyplot(fig)

# ========== 4) 簡易バックテスト指標（モデル=固定TopNで概算） ==========
def nav_from_weights(px, w, rb="quarterly", fee=0.001):
    idx, cols = list(px.index), list(px.columns)
    w_now = pd.Series(1/len(cols), index=cols)
    nav = pd.Series(index=idx, dtype=float); nav.iloc[0]=1.0
    for i in range(1,len(idx)):
        t = idx[i]
        if (rb=="monthly") or (rb=="quarterly" and t.month in (3,6,9,12)):
            w_new = w.reindex(cols).fillna(0)
            w_new = w_new / w_new.sum()
            turnover = (w_new - w_now).abs().sum()/2
            nav.iloc[i-1] *= (1 - fee*turnover)
            w_now = w_new
        r_vec = (px.iloc[i]/px.iloc[i-1]-1).fillna(0.0)
        nav.iloc[i] = nav.iloc[i-1]*(1 + float((w_now*r_vec).sum()))
    return nav

model_nav = nav_from_weights(m_prices[tickers_in], weights, rb=rebalance)

def cagr(nav): return (nav.iloc[-1]/nav.iloc[0])**(12/len(nav))-1
def maxdd(nav):
    peak = nav.cummax(); return float((nav/peak-1).min())
def sharpe(nav):
    r = nav.pct_change().dropna();
    return float((((1+r.mean())**12 -1) / (r.std()*np.sqrt(12))) if r.std()>0 else np.nan)

bench = {}
if "SPY" in m_prices.columns: bench["SPY"] = (1+m_prices["SPY"].pct_change().fillna(0)).cumprod()
if "VT"  in m_prices.columns: bench["VT"]  = (1+m_prices["VT"].pct_change().fillna(0)).cumprod()

st.subheader("パフォーマンス比較（概算）")
fig, ax = plt.subplots(figsize=(8,4))
for name, nav in bench.items():
    ax.plot(nav.index, nav, label=f"{name} (Buy&Hold)")
ax.plot(model_nav.index, model_nav, label=f"Model ({rebalance} RB)")
ax.set_title("NAV")
ax.legend(); ax.grid(True)
st.pyplot(fig)

st.write("**メトリクス**")
cols = st.columns(3)
cols[0].metric("CAGR", f"{cagr(model_nav):.2%}")
cols[1].metric("MaxDD", f"{maxdd(model_nav):.2%}")
cols[2].metric("Sharpe", f"{sharpe(model_nav):.2f}")
st.caption(f"Latest month: {m_prices.index[-1].strftime('%Y-%m')}")